// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlBug1319.Entities;
using NpgsqlTypes;

namespace NpgsqlBug1319.Entities.Migrations.DB
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "5.0.0-preview.2.20120.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnName("friendly_name")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnName("xml")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys");
                });

            modelBuilder.Entity("NpgsqlBug1319.Entities.AppRole", b =>
                {
                    b.Property<Guid>("AppRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_role_id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .HasColumnName("search_vector")
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppRoleID")
                        .HasName("pk_app_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_app_roles_name");

                    b.HasIndex("SearchVector")
                        .HasName("ix_app_roles_search_vector")
                        .HasAnnotation("Npgsql:IndexMethod", "GIN");

                    b.ToTable("app_roles");

                    b.HasData(
                        new
                        {
                            AppRoleID = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Users in this role can add, remove, and manage other users.",
                            Name = "Administrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("NpgsqlBug1319.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_profile_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .HasColumnName("search_vector")
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "FullName", "Email", "Username" });

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("UserProfileID")
                        .HasName("pk_user_profiles");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("ix_user_profiles_email");

                    b.HasIndex("SearchVector")
                        .HasName("ix_user_profiles_search_vector")
                        .HasAnnotation("Npgsql:IndexMethod", "GIN");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("ix_user_profiles_username");

                    b.ToTable("user_profiles");

                    b.HasData(
                        new
                        {
                            UserProfileID = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@company.com",
                            FullName = "Administrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Username = "administrator"
                        });
                });

            modelBuilder.Entity("NpgsqlBug1319.Entities.UserProfileAppRole", b =>
                {
                    b.Property<int>("UserProfileAppRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_profile_app_role_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("AppRoleID")
                        .HasColumnName("app_role_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserProfileID")
                        .HasColumnName("user_profile_id")
                        .HasColumnType("uuid");

                    b.HasKey("UserProfileAppRoleID")
                        .HasName("pk_user_profile_app_roles");

                    b.HasIndex("AppRoleID")
                        .HasName("ix_user_profile_app_roles_app_role_id");

                    b.HasIndex("UserProfileID", "AppRoleID")
                        .IsUnique()
                        .HasName("ix_user_profile_app_roles_user_profile_id_app_role_id");

                    b.ToTable("user_profile_app_roles");

                    b.HasData(
                        new
                        {
                            UserProfileAppRoleID = -1,
                            AppRoleID = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserProfileID = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("NpgsqlBug1319.Entities.UserProfileAppRole", b =>
                {
                    b.HasOne("NpgsqlBug1319.Entities.AppRole", "AppRole")
                        .WithMany("UserProfileAppRoles")
                        .HasForeignKey("AppRoleID")
                        .HasConstraintName("fk_user_profile_app_roles_app_roles_app_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NpgsqlBug1319.Entities.UserProfile", "UserProfile")
                        .WithMany("UserProfileAppRoles")
                        .HasForeignKey("UserProfileID")
                        .HasConstraintName("fk_user_profile_app_roles_user_profiles_user_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
